// SpaceInvaders.c
// Runs on LM4F120/TM4C123
// Jonathan Valvano and Daniel Valvano
// This is a starter project for the edX Lab 15
// In order for other students to play your game
// 1) You must leave the hardware configuration as defined
// 2) You must not add/remove any files from the project
// 3) You must add your code only this this C file
// I.e., if you wish to use code from sprite.c or sound.c, move that code in this file
// 4) It must compile with the 32k limit of the free Keil

// April 10, 2014
// http://www.spaceinvaders.de/
// sounds at http://www.classicgaming.cc/classics/spaceinvaders/sounds.php
// http://www.classicgaming.cc/classics/spaceinvaders/playguide.php
/* This example accompanies the books
   "Embedded Systems: Real Time Interfacing to Arm Cortex M Microcontrollers",
   ISBN: 978-1463590154, Jonathan Valvano, copyright (c) 2013

   "Embedded Systems: Introduction to Arm Cortex M Microcontrollers",
   ISBN: 978-1469998749, Jonathan Valvano, copyright (c) 2013

 Copyright 2014 by Jonathan W. Valvano, valvano@mail.utexas.edu
    You may use, edit, run or distribute this file
    as long as the above copyright notice remains
 THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
 OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 For more information about my classes, my research, and my books, see
 http://users.ece.utexas.edu/~valvano/
 */
// ******* Required Hardware I/O connections*******************
// Slide pot pin 1 connected to ground
// Slide pot pin 2 connected to PE2/AIN1
// Slide pot pin 3 connected to +3.3V 
// fire button connected to PE0
// special weapon fire button connected to PE1
// 8*R resistor DAC bit 0 on PB0 (least significant bit)
// 4*R resistor DAC bit 1 on PB1
// 2*R resistor DAC bit 2 on PB2
// 1*R resistor DAC bit 3 on PB3 (most significant bit)
// LED on PB4
// LED on PB5

// Blue Nokia 5110
// ---------------
// Signal        (Nokia 5110) LaunchPad pin
// Reset         (RST, pin 1) connected to PA7
// SSI0Fss       (CE,  pin 2) connected to PA3
// Data/Command  (DC,  pin 3) connected to PA6
// SSI0Tx        (Din, pin 4) connected to PA5
// SSI0Clk       (Clk, pin 5) connected to PA2
// 3.3V          (Vcc, pin 6) power
// back light    (BL,  pin 7) not connected, consists of 4 white LEDs which draw ~80mA total
// Ground        (Gnd, pin 8) ground

// Red SparkFun Nokia 5110 (LCD-10168)
// -----------------------------------
// Signal        (Nokia 5110) LaunchPad pin
// 3.3V          (VCC, pin 1) power
// Ground        (GND, pin 2) ground
// SSI0Fss       (SCE, pin 3) connected to PA3
// Reset         (RST, pin 4) connected to PA7
// Data/Command  (D/C, pin 5) connected to PA6
// SSI0Tx        (DN,  pin 6) connected to PA5
// SSI0Clk       (SCLK, pin 7) connected to PA2
// back light    (LED, pin 8) not connected, consists of 4 white LEDs which draw ~80mA total

// Blue Nokia 5110
// ---------------
// Signal        (Nokia 5110) LaunchPad pin
// Reset         (RST, pin 1) connected to PA7
// SSI0Fss       (CE,  pin 2) connected to PA3
// Data/Command  (DC,  pin 3) connected to PA6
// SSI0Tx        (Din, pin 4) connected to PA5
// SSI0Clk       (Clk, pin 5) connected to PA2
// 3.3V          (Vcc, pin 6) power
// back light    (BL,  pin 7) not connected, consists of 4 white LEDs which draw ~80mA total
// Ground        (Gnd, pin 8) ground



#include "..//tm4c123gh6pm.h"
#include "Nokia5110.h"
#include "Random.h"
#include "TExaS.h"
#include "ADC.h"
#include "Sound.h"
#include "Piano.h"
#include "DAC.h"
#include "Piano.h"
#include "Math.h"

// *************************** Images ***************************
// enemy ship that starts at the top of the screen (arms/mouth closed)
// width=16 x height=10
const unsigned char SmallEnemy30PointA[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
 0xFF, 0x0F, 0xF0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// enemy ship that starts at the top of the screen (arms/mouth open)
// width=16 x height=10
const unsigned char SmallEnemy30PointB[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
 0x0F, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
 0xFF, 0x0F, 0xF0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// enemy ship that starts in the middle of the screen (arms together)
// width=16 x height=10
const unsigned char SmallEnemy20PointA[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x0F, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF,
 0xF0, 0x0F, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// enemy ship that starts in the middle of the screen (arms apart)
// width=16 x height=10
const unsigned char SmallEnemy20PointB[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0,
 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x0F, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF,
 0xF0, 0x0F, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// enemy ship that starts at the bottom of the screen (arms down)
// width=16 x height=10
const unsigned char SmallEnemy10PointA[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0F, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F,
 0xF0, 0xFF, 0xFF, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// enemy ship that starts at the bottom of the screen (arms up)
// width=16 x height=10
const unsigned char SmallEnemy10PointB[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF,
 0xF0, 0xFF, 0xFF, 0x0F, 0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// image of the player's ship
// includes two blacked out columns on the left and right sides of the image to prevent smearing when moved 2 pixels to the left or right
// width=18 x height=8
const unsigned char PlayerShip0[] = {
 0x42, 0x4D, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0xAA, 0xAA, 0xAA,
 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// small, fast bonus enemy that occasionally speeds across the top of the screen after enough enemies have been killed to make room for it
// includes two blacked out columns on the left and right sides of the image to prevent smearing when moved 2 pixels to the left or right
// width=20 x height=7
const unsigned char SmallEnemyBonus0[] = {
 0x42, 0x4D, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0xFF, 0x0F, 0xF0,
 0xFF, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// small shield floating in space to cover the player's ship from enemy fire (undamaged)
// width=18 x height=5
const unsigned char Bunker0[] = {
 0x42, 0x4D, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0x00,
 0x00, 0x00, 0xAA, 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
 0xAA, 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0xFF};

// small shield floating in space to cover the player's ship from enemy fire (moderate generic damage)
// width=18 x height=5
const unsigned char Bunker1[] = {
 0x42, 0x4D, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0x00,
 0x00, 0x00, 0xAA, 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x0A, 0xAA, 0xAA, 0xAA, 0xAA, 0xA0, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0x0A, 0xA0, 0xA0, 0xAA,
 0xAA, 0xA0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xA0, 0x00, 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xFF};

// small shield floating in space to cover the player's ship from enemy fire (heavy generic damage)
// width=18 x height=5
const unsigned char Bunker2[] = {
 0x42, 0x4D, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xAA, 0x00,
 0x00, 0x00, 0xAA, 0x0A, 0xA0, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x0A, 0x0A, 0xA0, 0xAA, 0xA0, 0xA0, 0xA0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x0A, 0x00, 0xA0, 0xA0,
 0xA0, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// blank space used to cover a bunker that is destroyed
// width=18 x height=5
const unsigned char Bunker3[] = {
 0x42, 0x4D, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// large explosion that can be used upon the demise of the player's ship (first frame)
// width=18 x height=8
const unsigned char BigExplosion0[] = {
 0x42, 0x4D, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x0A, 0x00, 0x09, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x90, 0x00, 0x90, 0xB0, 0x0A, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0xA0, 0x00, 0xE0, 0x00, 0x00,
 0x90, 0x90, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0xA0, 0x00, 0x00, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00,
 0x00, 0xE0, 0x0A, 0x0A, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x09, 0x00, 0x00, 0x00, 0x90, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF};

// large explosion that can be used upon the demise of the player's ship (second frame)
// width=18 x height=8
const unsigned char BigExplosion1[] = {
 0x42, 0x4D, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x0E, 0x00, 0x09, 0x00, 0x09, 0x00, 0xB0, 0x00, 0xA0, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA9, 0x00, 0x00, 0x00, 0x00, 0x90,
 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x0A, 0x00, 0x90, 0x00, 0xB0, 0x00, 0x09, 0x00, 0x00, 0x00, 0xFF};

// small explosion best used for the demise of an enemy
// width=16 x height=10
const unsigned char SmallExplosion0[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0,
 0x0F, 0x00, 0x0F, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0xF0, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0xF0, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// blank space following the small explosion for the demise of an enemy
// width=16 x height=10
const unsigned char SmallExplosion1[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// a missile in flight
// includes one blacked out row on the top, bottom, and right of the image to prevent smearing when moved 1 pixel down, up, or left
// width=4 x height=9
const unsigned char Missile0[] = {
 0x42, 0x4D, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0x00,
 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// a missile in flight
// includes one blacked out row on the top, bottom, and left of the image to prevent smearing when moved 1 pixel down, up, or right
// width=4 x height=9
const unsigned char Missile1[] = {
 0x42, 0x4D, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0F,
 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// blank space to cover a missile after it hits something
// width=4 x height=9
const unsigned char Missile2[] = {
 0x42, 0x4D, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// a laser burst in flight
// includes one blacked out row on the top and bottom of the image to prevent smearing when moved 1 pixel up or down
// width=2 x height=9
const unsigned char Laser0[] = {
 0x42, 0x4D, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0xBB, 0x00,
 0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// blank space to cover a laser after it hits something
// width=2 x height=9
const unsigned char Laser1[] = {
 0x42, 0x4D, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

	const unsigned char shoot[4080] = {		
  8, 6, 6, 10, 13, 8, 2, 7, 13, 7, 3, 6, 9, 14, 10, 4, 5, 10, 12, 6, 		
  5, 8, 13, 8, 3, 6, 8, 13, 10, 5, 5, 8, 12, 7, 4, 8, 13, 9, 4, 7, 		
  9, 11, 7, 3, 8, 13, 8, 5, 7, 13, 15, 6, 3, 5, 10, 7, 2, 5, 9, 13, 		
  12, 12, 12, 7, 6, 1, 0, 5, 10, 7, 8, 15, 15, 15, 7, 0, 0, 0, 0, 0, 		
  6, 15, 15, 15, 15, 15, 12, 0, 0, 0, 1, 11, 10, 9, 15, 15, 15, 11, 2, 0, 		
  0, 1, 0, 4, 10, 15, 15, 15, 15, 15, 4, 0, 0, 3, 4, 3, 8, 13, 15, 15, 		
  15, 9, 3, 1, 0, 0, 1, 9, 13, 13, 15, 15, 15, 13, 0, 0, 0, 1, 1, 2, 		
  8, 15, 15, 15, 15, 15, 9, 0, 0, 0, 5, 4, 5, 11, 15, 15, 15, 15, 9, 3, 		
  0, 0, 1, 7, 5, 8, 13, 15, 15, 15, 9, 4, 0, 0, 0, 0, 9, 10, 10, 14, 		
  15, 15, 15, 5, 0, 0, 0, 0, 0, 5, 13, 14, 14, 15, 15, 15, 7, 0, 0, 0, 		
  5, 4, 3, 8, 13, 15, 15, 15, 14, 7, 3, 0, 0, 0, 7, 8, 6, 12, 15, 15, 		
  15, 14, 9, 5, 0, 0, 0, 6, 6, 6, 11, 15, 15, 15, 15, 12, 7, 0, 0, 0, 		
  3, 8, 7, 8, 14, 15, 15, 15, 15, 6, 3, 0, 0, 0, 1, 8, 13, 10, 12, 15, 		
  15, 15, 12, 1, 0, 0, 0, 0, 3, 10, 13, 12, 13, 15, 15, 15, 9, 5, 1, 0, 		
  0, 0, 7, 9, 7, 11, 15, 15, 15, 15, 13, 8, 0, 0, 0, 2, 5, 5, 8, 13, 		
  15, 15, 15, 15, 15, 8, 0, 0, 0, 2, 2, 2, 7, 12, 15, 15, 15, 15, 15, 14, 		
  2, 0, 0, 0, 3, 3, 4, 8, 13, 15, 15, 15, 15, 15, 14, 2, 0, 0, 0, 1, 		
  2, 6, 11, 15, 14, 14, 15, 15, 15, 9, 2, 0, 0, 0, 0, 1, 6, 12, 12, 11, 		
  15, 15, 15, 15, 13, 3, 0, 0, 0, 0, 0, 4, 9, 15, 12, 12, 15, 15, 15, 15, 		
  9, 3, 0, 0, 0, 0, 2, 7, 13, 10, 10, 14, 15, 15, 15, 13, 9, 4, 1, 0, 		
  0, 0, 6, 8, 7, 10, 11, 15, 15, 15, 14, 15, 14, 5, 0, 0, 0, 0, 1, 3, 		
  8, 13, 13, 11, 15, 15, 15, 14, 13, 9, 5, 0, 0, 0, 0, 6, 7, 7, 11, 14, 		
  13, 13, 15, 15, 15, 13, 7, 3, 1, 0, 0, 0, 6, 6, 7, 10, 13, 15, 15, 14, 		
  15, 15, 14, 9, 4, 1, 0, 0, 0, 3, 6, 7, 9, 12, 14, 12, 14, 15, 15, 15, 		
  11, 9, 5, 1, 0, 0, 0, 4, 5, 7, 10, 12, 15, 13, 13, 15, 15, 15, 13, 9, 		
  4, 2, 0, 0, 0, 1, 6, 7, 9, 11, 13, 15, 14, 13, 15, 15, 15, 12, 7, 2, 		
  0, 0, 0, 0, 2, 8, 8, 9, 11, 12, 14, 15, 14, 13, 15, 15, 14, 9, 3, 0, 		
  0, 0, 0, 0, 4, 10, 11, 10, 11, 11, 13, 15, 14, 13, 14, 15, 13, 8, 3, 1, 		
  0, 0, 0, 0, 5, 10, 10, 10, 11, 13, 14, 12, 12, 14, 15, 15, 12, 9, 7, 3, 		
  0, 0, 0, 1, 4, 5, 8, 10, 13, 13, 11, 10, 12, 15, 14, 13, 13, 13, 13, 7, 		
  1, 0, 0, 0, 0, 1, 6, 10, 11, 10, 11, 12, 14, 11, 11, 13, 13, 15, 13, 11, 		
  10, 7, 4, 0, 0, 0, 0, 1, 3, 7, 10, 13, 13, 11, 10, 11, 13, 12, 11, 12, 		
  14, 13, 11, 9, 5, 3, 0, 0, 0, 0, 3, 5, 7, 10, 11, 13, 12, 10, 11, 12, 		
  12, 11, 12, 13, 14, 11, 9, 8, 6, 4, 0, 0, 0, 0, 4, 6, 7, 10, 12, 12, 		
  11, 10, 11, 12, 11, 10, 12, 12, 13, 13, 10, 10, 9, 6, 2, 0, 0, 0, 0, 1, 		
  4, 7, 10, 13, 12, 11, 11, 12, 10, 9, 10, 11, 13, 12, 11, 11, 12, 10, 8, 6, 		
  4, 2, 0, 0, 0, 2, 5, 7, 8, 10, 12, 13, 11, 11, 11, 11, 11, 9, 10, 11, 		
  13, 11, 10, 11, 11, 11, 8, 5, 3, 2, 1, 0, 0, 1, 4, 8, 9, 9, 11, 11, 		
  12, 12, 10, 10, 10, 11, 9, 9, 10, 12, 12, 11, 10, 10, 11, 9, 7, 5, 4, 1, 		
  0, 0, 2, 3, 3, 5, 8, 11, 11, 11, 11, 12, 11, 10, 9, 10, 10, 9, 8, 9, 		
  11, 12, 11, 10, 10, 10, 10, 8, 7, 6, 4, 1, 0, 1, 1, 3, 4, 5, 7, 9, 		
  11, 12, 12, 11, 11, 11, 11, 10, 9, 9, 9, 9, 8, 9, 10, 11, 11, 10, 10, 9, 		
  9, 9, 8, 7, 6, 3, 3, 2, 1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 11, 11, 		
  11, 11, 10, 9, 9, 9, 9, 9, 8, 8, 9, 9, 10, 10, 10, 11, 9, 9, 9, 8, 		
  9, 7, 7, 6, 5, 3, 2, 2, 3, 3, 4, 5, 6, 7, 9, 10, 10, 11, 11, 11, 		
  11, 10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 9, 		
  9, 8, 9, 8, 7, 7, 7, 7, 6, 4, 3, 3, 3, 3, 4, 4, 5, 7, 7, 7, 		
  9, 10, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 8, 8, 8, 		
  9, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 8, 		
  7, 5, 3, 1, 0, 0, 3, 6, 9, 10, 13, 15, 15, 11, 5, 4, 3, 7, 14, 13, 		
  5, 4, 4, 7, 15, 13, 5, 4, 4, 8, 15, 13, 5, 4, 4, 7, 15, 13, 5, 4, 		
  4, 7, 15, 13, 5, 4, 4, 7, 15, 13, 5, 4, 4, 6, 15, 14, 5, 4, 4, 6, 		
  15, 14, 5, 3, 4, 6, 14, 15, 6, 3, 4, 5, 13, 15, 7, 3, 3, 5, 11, 15, 		
  9, 3, 4, 4, 10, 15, 10, 3, 3, 4, 9, 15, 12, 4, 3, 3, 7, 15, 13, 5, 		
  3, 3, 6, 15, 15, 6, 3, 3, 5, 13, 15, 8, 3, 4, 4, 10, 15, 11, 3, 3, 		
  3, 8, 15, 13, 4, 3, 3, 6, 15, 15, 6, 3, 4, 5, 12, 15, 9, 3, 3, 3, 		
  9, 15, 13, 4, 3, 3, 6, 15, 15, 6, 3, 3, 4, 12, 15, 10, 3, 3, 4, 8, 		
  15, 13, 4, 3, 3, 6, 14, 15, 7, 3, 3, 4, 10, 15, 12, 3, 3, 3, 6, 15, 		
  15, 6, 3, 3, 4, 11, 15, 11, 3, 3, 3, 7, 15, 15, 5, 3, 3, 5, 11, 15, 		
  11, 3, 3, 4, 7, 15, 15, 6, 3, 3, 4, 11, 15, 11, 3, 3, 3, 6, 15, 15, 		
  7, 3, 3, 4, 10, 15, 13, 4, 2, 3, 6, 13, 15, 9, 3, 3, 3, 8, 15, 15, 		
  5, 3, 3, 4, 10, 15, 12, 3, 3, 3, 6, 13, 15, 9, 3, 3, 4, 8, 15, 15, 		
  6, 3, 3, 4, 10, 15, 13, 4, 3, 3, 5, 12, 15, 10, 3, 3, 4, 6, 14, 15, 		
  8, 3, 3, 4, 8, 15, 15, 6, 2, 3, 4, 9, 15, 14, 4, 3, 3, 5, 10, 15, 		
  13, 3, 3, 3, 5, 12, 15, 11, 3, 3, 4, 6, 13, 15, 10, 3, 3, 4, 6, 14, 		
  15, 9, 3, 3, 4, 7, 14, 15, 8, 3, 3, 4, 7, 14, 15, 8, 2, 3, 4, 7, 		
  15, 15, 8, 3, 3, 4, 7, 14, 15, 7, 3, 3, 4, 7, 14, 15, 8, 3, 3, 4, 		
  7, 14, 15, 8, 3, 3, 4, 7, 13, 15, 10, 3, 3, 4, 6, 12, 15, 11, 3, 3, 		
  4, 6, 11, 15, 12, 4, 2, 3, 5, 9, 15, 13, 4, 2, 3, 5, 9, 15, 15, 5, 		
  3, 3, 5, 8, 15, 15, 7, 3, 3, 4, 7, 13, 15, 10, 3, 3, 4, 6, 11, 15, 		
  13, 4, 3, 3, 5, 9, 15, 15, 6, 3, 3, 5, 7, 13, 15, 9, 3, 3, 4, 6, 		
  10, 15, 13, 4, 3, 4, 5, 9, 15, 15, 7, 3, 3, 4, 7, 12, 15, 11, 3, 3, 		
  3, 6, 9, 15, 15, 6, 3, 3, 5, 7, 12, 15, 11, 3, 3, 4, 6, 9, 15, 15, 		
  6, 3, 3, 5, 7, 12, 15, 12, 4, 3, 3, 5, 8, 15, 15, 7, 3, 3, 4, 7, 		
  10, 15, 13, 4, 3, 3, 5, 7, 13, 15, 10, 3, 3, 4, 6, 9, 15, 15, 7, 3, 		
  3, 4, 6, 10, 15, 14, 4, 3, 3, 5, 7, 11, 15, 12, 4, 3, 3, 6, 8, 13, 		
  15, 10, 3, 3, 4, 6, 8, 14, 15, 8, 3, 3, 4, 6, 9, 15, 15, 6, 3, 3, 		
  5, 6, 9, 15, 15, 5, 3, 3, 5, 6, 10, 15, 14, 5, 3, 3, 5, 7, 10, 15, 		
  14, 5, 3, 3, 5, 7, 10, 15, 14, 5, 3, 3, 5, 7, 10, 15, 14, 6, 3, 3, 		
  5, 7, 9, 15, 15, 7, 3, 3, 5, 6, 9, 14, 15, 8, 3, 3, 4, 6, 8, 13, 		
  15, 9, 3, 3, 4, 6, 8, 12, 15, 11, 4, 3, 4, 5, 7, 10, 15, 13, 4, 3, 		
  3, 5, 7, 9, 15, 15, 7, 3, 3, 4, 7, 8, 13, 15, 10, 4, 3, 4, 6, 7, 		
  11, 15, 13, 5, 3, 3, 5, 7, 9, 14, 15, 8, 3, 3, 4, 6, 8, 11, 15, 12, 		
  4, 3, 4, 6, 7, 9, 15, 15, 8, 4, 3, 4, 6, 7, 11, 15, 12, 5, 3, 4, 		
  5, 7, 9, 14, 15, 9, 3, 3, 4, 6, 7, 10, 15, 14, 6, 3, 4, 5, 6, 8, 		
  11, 15, 12, 4, 3, 4, 5, 7, 9, 13, 15, 10, 4, 3, 4, 6, 7, 9, 14, 15, 		
  9, 4, 3, 4, 6, 7, 10, 15, 15, 7, 3, 4, 4, 6, 7, 10, 15, 14, 6, 3, 		
  3, 4, 6, 7, 10, 15, 14, 6, 3, 3, 4, 7, 8, 10, 15, 14, 6, 3, 3, 4, 		
  7, 8, 10, 15, 14, 7, 3, 3, 4, 6, 8, 10, 14, 15, 8, 3, 3, 4, 6, 7, 		
  9, 13, 15, 10, 4, 3, 4, 6, 7, 9, 12, 15, 11, 4, 3, 4, 5, 7, 8, 11, 		
  15, 14, 6, 4, 4, 4, 7, 8, 10, 14, 15, 9, 4, 3, 4, 6, 7, 9, 12, 15, 		
  12, 5, 3, 4, 5, 7, 8, 10, 14, 15, 8, 4, 4, 4, 6, 7, 8, 11, 15, 12, 		
  5, 3, 4, 5, 7, 8, 9, 13, 15, 10, 4, 3, 4, 6, 7, 8, 10, 15, 14, 7, 		
  4, 3, 4, 6, 8, 9, 11, 15, 13, 5, 3, 3, 4, 6, 8, 9, 12, 15, 11, 4, 		
  3, 4, 5, 7, 8, 9, 12, 15, 11, 4, 3, 4, 5, 7, 8, 9, 13, 15, 11, 4, 		
  3, 4, 5, 7, 8, 9, 12, 15, 11, 4, 3, 4, 5, 7, 8, 9, 12, 15, 12, 5, 		
  3, 4, 5, 7, 8, 9, 11, 15, 13, 6, 4, 4, 5, 6, 7, 8, 10, 14, 15, 8, 		
  4, 3, 4, 6, 7, 8, 9, 12, 15, 11, 4, 3, 4, 5, 7, 8, 9, 10, 15, 14, 		
  6, 4, 3, 4, 6, 7, 8, 9, 12, 15, 11, 4, 3, 4, 5, 7, 8, 8, 10, 14, 		
  14, 8, 4, 3, 4, 6, 7, 8, 9, 11, 15, 13, 6, 4, 3, 5, 6, 7, 8, 9, 		
  12, 15, 12, 5, 3, 4, 5, 7, 7, 8, 9, 13, 15, 11, 4, 3, 4, 5, 7, 8, 		
  9, 9, 12, 15, 11, 4, 3, 4, 5, 7, 7, 9, 9, 12, 15, 12, 5, 3, 4, 5, 		
  6, 7, 8, 9, 11, 15, 13, 6, 3, 3, 5, 6, 7, 8, 9, 10, 14, 15, 8, 4, 		
  3, 4, 6, 7, 8, 9, 10, 12, 15, 11, 5, 3, 3, 5, 7, 7, 8, 9, 11, 14, 		
  14, 8, 4, 3, 4, 6, 7, 8, 9, 9, 12, 15, 13, 6, 4, 4, 4, 6, 7, 8, 		
  9, 9, 12, 15, 11, 5, 3, 4, 4, 6, 7, 8, 9, 9, 12, 15, 10, 4, 3, 3, 		
  5, 6, 7, 8, 9, 9, 12, 15, 11, 4, 4, 4, 5, 6, 7, 8, 9, 9, 12, 15, 		
  12, 5, 3, 4, 5, 6, 7, 8, 9, 9, 11, 14, 13, 8, 4, 3, 4, 6, 7, 8, 		
  9, 9, 10, 12, 15, 11, 5, 3, 4, 5, 7, 8, 8, 9, 9, 11, 14, 14, 8, 4, 		
  3, 4, 6, 7, 8, 8, 9, 9, 11, 15, 13, 7, 3, 3, 4, 6, 7, 8, 9, 9, 		
  9, 11, 15, 12, 6, 4, 3, 4, 6, 7, 8, 9, 9, 9, 11, 14, 13, 7, 4, 3, 		
  4, 6, 7, 8, 8, 9, 9, 10, 13, 14, 9, 4, 3, 4, 5, 7, 8, 8, 9, 9, 		
  9, 12, 14, 12, 6, 3, 3, 5, 6, 7, 8, 9, 9, 9, 10, 12, 14, 10, 4, 3, 		
  3, 5, 7, 7, 8, 9, 9, 9, 10, 13, 14, 9, 4, 3, 4, 5, 7, 8, 8, 9, 		
  9, 9, 10, 13, 14, 10, 4, 3, 4, 5, 6, 8, 8, 9, 9, 9, 10, 12, 14, 11, 		
  6, 3, 3, 4, 6, 7, 8, 9, 9, 9, 9, 10, 13, 14, 9, 4, 3, 4, 5, 6, 		
  7, 8, 9, 9, 9, 9, 11, 13, 12, 8, 4, 3, 4, 6, 7, 7, 8, 9, 9, 9, 		
  9, 11, 13, 13, 8, 4, 3, 4, 5, 7, 8, 8, 9, 9, 9, 9, 10, 12, 13, 10, 		
  4, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 11, 13, 12, 7, 4, 3, 4, 6, 		
  7, 8, 8, 9, 9, 9, 9, 9, 11, 13, 12, 7, 4, 3, 4, 6, 7, 8, 9, 9, 		
  9, 9, 9, 9, 11, 13, 12, 8, 4, 3, 4, 5, 7, 8, 8, 9, 9, 9, 9, 9, 		
  10, 12, 13, 10, 6, 3, 3, 5, 6, 7, 8, 8, 9, 9, 9, 9, 9, 10, 12, 13, 		
  10, 5, 4, 3, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 11, 13, 11, 7, 4, 		
  3, 4, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 10, 11, 13, 10, 5, 3, 3, 4, 		
  6, 7, 8, 8, 9, 9, 9, 9, 9, 8, 9, 11, 13, 10, 6, 3, 3, 5, 6, 7, 		
  8, 8, 9, 9, 9, 9, 9, 9, 8, 10, 12, 12, 9, 5, 3, 3, 5, 6, 7, 8, 		
  9, 9, 9, 9, 9, 9, 9, 9, 10, 12, 12, 10, 5, 4, 3, 5, 6, 7, 8, 9, 		
  9, 9, 9, 9, 9, 9, 9, 9, 10, 12, 12, 9, 5, 3, 4, 5, 6, 7, 8, 9, 		
  9, 9, 9, 9, 9, 9, 8, 9, 9, 11, 12, 10, 6, 4, 3, 5, 6, 7, 8, 8, 		
  9, 9, 9, 9, 9, 8, 9, 8, 8, 9, 11, 12, 10, 6, 4, 3, 5, 6, 7, 8, 		
  8, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 10, 11, 12, 9, 5, 4, 3, 5, 6, 		
  7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 9, 10, 11, 11, 8, 5, 3, 		
  4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 8, 9, 9, 8, 8, 8, 8, 9, 10, 11, 		
  10, 7, 4, 3, 4, 5, 7, 7, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 		
  8, 8, 9, 11, 11, 10, 7, 4, 4, 4, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 		
  8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 11, 10, 7, 4, 3, 4, 5, 7, 7, 8, 		
  9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 10, 11, 9, 		
  6, 4, 4, 5, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 9, 10, 11, 10, 7, 5, 4, 4, 5, 6, 8, 8, 8, 9, 9, 		
  9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 10, 11, 		
  9, 6, 5, 4, 5, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 10, 10, 8, 6, 4, 4, 5, 		
  6, 7, 8, 8, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 10, 10, 8, 6, 5, 4, 4, 6, 7, 		
  8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 10, 10, 9, 8, 6, 5, 		
  4, 4, 6, 7, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 9, 9, 9, 9, 9, 8, 7, 6, 5, 4, 5, 6, 7, 8, 8, 9, 		
  9, 9, 9, 9, 9, 9, 8, 10, 11, 7, 6, 7, 7, 7, 8, 10, 8, 6, 8, 7, 		
  8, 10, 7, 6, 8, 7, 9, 10, 7, 7, 8, 7, 8, 10, 8, 6, 8, 7, 8, 10, 		
  8, 6, 8, 7, 8, 10, 7, 7, 8, 7, 8, 10, 7, 6, 8, 7, 8, 10, 7, 7, 		
  8, 7, 8, 10, 7, 7, 8, 7, 8, 10, 8, 7, 8, 7, 8, 9, 8, 8, 8, 7, 		
  8, 9, 9, 8, 7, 7, 7, 8, 10, 8, 7, 8, 7, 8, 10, 8, 6, 8, 7, 8, 		
  10, 7, 7, 8, 7, 8, 10, 8, 7, 8, 7, 8, 9, 9, 8, 7, 8, 7, 8, 10, 		
  7, 6, 8, 7, 8, 10, 7, 7, 8, 7, 8, 9, 8, 8, 7, 7, 8, 8, 10, 8, 		
  7, 8, 7, 8, 10, 7, 7, 8, 7, 8, 9, 8, 8, 7, 7, 7, 8, 10, 8, 7, 		
  8, 7, 8, 10, 8, 7, 8, 7, 8, 9, 9, 8, 7, 8, 7, 8, 10, 7, 7, 8, 		
  7, 8, 9, 9, 8, 7, 7, 7, 8, 10, 8, 7, 8, 7, 8, 9, 9, 8, 7, 8, 		
  7, 8, 10, 7, 7, 8, 7, 8, 9, 9, 8, 7, 7, 7, 8, 10, 7, 7, 8, 7, 		
  8, 8, 10, 8, 7, 8, 7, 8, 10, 8, 8, 8, 7, 8, 8, 10, 8, 7, 8, 7, 		
  8, 9, 9, 8, 7, 7, 7, 8, 10, 8, 7, 8, 7, 8, 8, 10, 7, 7, 8, 7, 		
  8, 9, 10, 8, 7, 8, 7, 8, 9, 8, 8, 7, 7, 7, 8, 10, 7, 7, 8, 7, 		
  8, 8, 10, 8, 7, 8, 7, 8, 9, 10, 8, 7, 8, 7, 8, 9, 9, 8, 7, 7, 		
  7, 8, 9, 8, 8, 7, 7, 8, 8, 10, 8, 8, 8, 7, 7, 8, 10, 8, 8, 8, 		
  7, 8, 8, 10, 8, 7, 8, 7, 8, 8, 10, 7, 7, 8, 7, 8, 8, 10, 7, 7, 		
  8, 7, 8, 8, 10, 7, 7, 8, 7, 8, 8, 10, 7, 7, 8, 8, 8, 8, 10, 8, 		
  8, 8, 7, 8, 8, 10, 8, 8, 8, 7, 8, 8, 9, 8, 8, 8, 7, 8, 8, 9, 		
  9, 8, 7, 7, 8, 8, 8, 9, 8, 7, 7, 8, 8, 8, 10, 8, 7, 8, 7, 7, 		
  8, 10, 7, 7, 8, 7, 8, 8, 9, 8, 8, 8, 7, 8, 8, 9, 9, 8, 7, 7, 		
  8, 8, 8, 10, 8, 7, 8, 8, 8, 8, 10, 8, 7, 8, 7, 8, 8, 9, 9, 8, 		
  7, 7, 8, 7, 8, 10, 7, 7, 8, 7, 8, 8, 9, 8, 8, 8, 7, 8, 8, 8, 		
  10, 8, 7, 8, 7, 8, 8, 9, 8, 8, 8, 7, 8, 8, 8, 10, 7, 7, 8, 7, 		
  8, 8, 9, 8, 8, 8, 7, 8, 8, 8, 10, 7, 7, 8, 7, 8, 8, 9, 9, 8, 		
  8, 7, 8, 8, 8, 9, 8, 8, 8, 7, 8, 8, 8, 10, 8, 7, 8, 7, 8, 8, 		
  9, 9, 8, 8, 7, 8, 8, 8, 9, 8, 8, 8, 7, 8, 7, 8, 9, 7, 8, 8, 		
  7, 8, 8, 8, 10, 8, 8, 8, 7, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 		
  9, 8, 8, 7, 8, 8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 9, 9, 8, 8, 8, 		
  8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 9, 		
  9, 8, 8, 8, 8, 8, 8, 8, 9, 8, 7, 7, 7, 8, 8, 8, 9, 7, 7, 8, 		
  7, 8, 8, 8, 9, 7, 8, 8, 7, 8, 8, 8, 9, 8, 8, 8, 7, 8, 8, 8, 		
  9, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 		
  8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 9, 7, 8, 8, 8, 8, 		
  8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 9, 7, 8, 8, 8, 8, 8, 8, 8, 		
  9, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 9, 7, 8, 		
  8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 		
  8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 7, 8, 8, 8, 8, 9, 		
  8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 		
  8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8};	
const unsigned char explosion[8731] = {		
  8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 9, 8, 8, 		
  7, 6, 6, 6, 6, 7, 8, 9, 9, 8, 8, 7, 6, 6, 6, 7, 7, 7, 8, 7, 		
  8, 8, 9, 9, 10, 11, 11, 11, 10, 9, 8, 7, 6, 5, 5, 5, 5, 5, 5, 6, 		
  8, 9, 9, 9, 9, 9, 10, 11, 11, 10, 8, 7, 7, 7, 7, 7, 9, 9, 9, 8, 		
  8, 9, 10, 11, 11, 12, 12, 12, 11, 10, 9, 7, 5, 2, 0, 0, 0, 0, 1, 1, 		
  3, 5, 7, 8, 8, 9, 9, 11, 12, 13, 13, 13, 12, 11, 11, 13, 15, 15, 15, 15, 		
  15, 15, 15, 13, 12, 11, 8, 5, 3, 2, 3, 2, 2, 3, 4, 3, 2, 0, 0, 0, 		
  0, 0, 0, 1, 2, 4, 8, 10, 11, 13, 14, 15, 15, 15, 15, 14, 12, 10, 6, 3, 		
  0, 0, 0, 0, 0, 0, 4, 6, 8, 10, 12, 14, 15, 15, 14, 12, 10, 10, 10, 10, 		
  10, 10, 8, 5, 2, 1, 0, 1, 3, 4, 6, 9, 11, 12, 13, 13, 12, 10, 10, 10, 		
  10, 11, 12, 11, 10, 9, 10, 12, 15, 15, 15, 15, 15, 15, 15, 14, 11, 7, 2, 0, 		
  0, 0, 1, 4, 6, 8, 11, 11, 11, 10, 9, 7, 6, 5, 3, 2, 2, 3, 2, 3, 		
  5, 8, 10, 9, 8, 6, 4, 4, 5, 6, 8, 10, 11, 12, 14, 15, 15, 15, 11, 7, 		
  3, 0, 0, 0, 1, 4, 7, 11, 14, 14, 11, 7, 4, 3, 2, 2, 2, 1, 1, 1, 		
  2, 5, 9, 14, 15, 15, 15, 15, 15, 15, 15, 15, 13, 10, 5, 0, 0, 0, 0, 0, 		
  0, 0, 3, 5, 5, 4, 4, 6, 7, 8, 8, 8, 8, 9, 12, 14, 15, 15, 15, 15, 		
  15, 15, 15, 15, 15, 15, 15, 15, 13, 9, 5, 2, 0, 0, 0, 0, 0, 3, 7, 8, 		
  7, 5, 3, 1, 2, 4, 5, 6, 6, 6, 7, 7, 8, 10, 13, 15, 15, 15, 15, 15, 		
  15, 14, 10, 7, 5, 6, 8, 10, 12, 13, 12, 9, 5, 0, 0, 0, 0, 0, 0, 0, 		
  0, 3, 8, 13, 15, 15, 15, 15, 15, 14, 11, 9, 7, 4, 0, 0, 0, 0, 0, 0, 		
  0, 2, 8, 12, 13, 13, 14, 15, 15, 15, 15, 15, 13, 13, 14, 15, 15, 15, 15, 15, 		
  13, 9, 7, 7, 8, 10, 12, 14, 14, 12, 10, 8, 7, 7, 6, 6, 6, 6, 7, 7, 		
  7, 5, 3, 1, 1, 3, 5, 7, 8, 9, 10, 12, 15, 15, 15, 15, 15, 15, 15, 15, 		
  15, 15, 11, 7, 3, 1, 2, 4, 5, 8, 11, 14, 15, 13, 10, 6, 2, 0, 0, 0, 		
  0, 1, 2, 5, 8, 9, 10, 11, 11, 12, 11, 7, 4, 2, 2, 2, 2, 2, 3, 4, 		
  4, 4, 5, 6, 5, 5, 5, 4, 3, 3, 4, 5, 6, 9, 12, 14, 15, 14, 13, 10, 		
  9, 9, 9, 9, 7, 6, 5, 5, 7, 10, 14, 15, 15, 15, 15, 14, 13, 11, 9, 8, 		
  7, 6, 6, 6, 7, 8, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 		
  12, 12, 12, 11, 10, 10, 9, 9, 7, 7, 6, 6, 6, 6, 6, 7, 6, 6, 5, 4, 		
  4, 4, 5, 5, 5, 5, 6, 8, 9, 9, 10, 10, 11, 11, 11, 11, 10, 10, 9, 7, 		
  5, 3, 2, 1, 2, 2, 4, 5, 7, 7, 8, 9, 10, 11, 11, 10, 9, 9, 8, 8, 		
  8, 9, 8, 8, 6, 5, 4, 4, 4, 5, 5, 6, 7, 8, 9, 9, 9, 8, 9, 10, 		
  11, 11, 11, 10, 9, 8, 7, 7, 8, 11, 13, 15, 15, 15, 15, 15, 15, 14, 10, 5, 		
  1, 0, 0, 3, 5, 6, 6, 8, 8, 7, 7, 6, 4, 3, 2, 1, 0, 1, 2, 3, 		
  5, 8, 12, 13, 13, 11, 9, 7, 7, 7, 7, 8, 9, 9, 10, 11, 12, 12, 11, 8, 		
  6, 4, 1, 1, 1, 2, 4, 6, 9, 11, 11, 10, 7, 5, 4, 5, 6, 6, 5, 4, 		
  4, 5, 7, 11, 14, 15, 15, 15, 15, 14, 13, 13, 12, 11, 9, 5, 1, 0, 0, 0, 		
  0, 0, 0, 3, 5, 5, 4, 4, 6, 7, 8, 8, 8, 8, 9, 11, 13, 15, 15, 15, 		
  15, 15, 15, 15, 15, 15, 15, 15, 15, 13, 9, 6, 3, 0, 0, 0, 0, 0, 3, 7, 		
  8, 7, 4, 2, 1, 2, 4, 5, 6, 6, 6, 7, 7, 8, 10, 13, 15, 15, 15, 15, 		
  15, 15, 14, 10, 7, 5, 6, 8, 10, 12, 13, 12, 9, 5, 0, 0, 0, 0, 0, 0, 		
  0, 0, 3, 8, 13, 15, 15, 15, 15, 15, 14, 11, 9, 7, 4, 0, 0, 0, 0, 0, 		
  0, 0, 2, 8, 12, 13, 13, 14, 15, 15, 15, 15, 15, 13, 13, 14, 15, 15, 15, 15, 		
  15, 13, 9, 7, 7, 8, 10, 12, 14, 14, 12, 10, 8, 7, 7, 6, 6, 6, 6, 7, 		
  7, 7, 5, 3, 1, 1, 3, 5, 7, 8, 9, 10, 12, 15, 15, 15, 15, 15, 15, 15, 		
  15, 15, 15, 12, 7, 3, 1, 1, 3, 5, 8, 11, 14, 15, 14, 10, 6, 1, 0, 0, 		
  0, 0, 0, 2, 5, 8, 9, 10, 10, 11, 12, 11, 7, 3, 1, 1, 2, 1, 2, 3, 		
  4, 4, 4, 5, 5, 5, 4, 4, 2, 1, 1, 2, 4, 6, 10, 14, 15, 15, 15, 14, 		
  11, 9, 9, 9, 8, 6, 5, 3, 3, 6, 10, 15, 15, 15, 15, 15, 15, 15, 15, 13, 		
  11, 9, 8, 6, 6, 7, 8, 9, 9, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 		
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 9, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 8, 7, 7, 7, 		
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 		
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 5, 5, 4, 4, 7, 		
  10, 11, 11, 10, 8, 5, 4, 3, 3, 3, 4, 5, 9, 13, 15, 15, 15, 15, 15, 15, 		
  9, 5, 4, 4, 6, 6, 5, 4, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 		
  4, 10, 15, 15, 15, 15, 15, 15, 15, 14, 13, 11, 8, 6, 4, 3, 3, 3, 2, 0, 		
  0, 2, 5, 7, 7, 6, 5, 4, 3, 3, 4, 5, 6, 8, 9, 11, 13, 15, 15, 15, 		
  15, 15, 15, 15, 15, 11, 7, 3, 0, 0, 0, 0, 0, 0, 0, 4, 6, 7, 6, 6, 		
  6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 6, 3, 2, 0, 		
  0, 2, 3, 5, 7, 9, 11, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 		
  7, 1, 0, 0, 0, 0, 0, 1, 6, 8, 8, 6, 3, 1, 0, 0, 0, 0, 0, 0, 		
  1, 2, 2, 0, 0, 1, 4, 7, 8, 8, 7, 6, 8, 11, 14, 15, 14, 12, 10, 9, 		
  7, 6, 6, 6, 6, 6, 6, 6, 4, 2, 1, 2, 5, 10, 13, 13, 13, 11, 11, 11, 		
  11, 10, 8, 8, 9, 10, 10, 10, 11, 14, 14, 14, 14, 14, 13, 11, 8, 6, 4, 2, 		
  1, 1, 1, 1, 2, 2, 3, 3, 2, 2, 3, 4, 6, 8, 10, 9, 9, 8, 8, 8, 		
  7, 7, 7, 7, 7, 7, 7, 6, 5, 7, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 7, 7, 7, 7, 8, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 		
  8, 8, 8, 7, 7, 7, 7, 7, 6, 5, 4, 5, 7, 9, 10, 11, 12, 11, 10, 9, 		
  8, 7, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 		
  7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 5, 3, 2, 2, 4, 6, 8, 8, 9, 9, 		
  8, 8, 9, 11, 13, 15, 15, 15, 15, 15, 15, 13, 11, 8, 5, 4, 4, 3, 3, 3, 		
  5, 7, 8, 8, 9, 9, 8, 6, 4, 3, 2, 1, 0, 0, 0, 0, 0, 1, 2, 4, 		
  7, 11, 14, 15, 14, 13, 11, 9, 8, 7, 7, 6, 6, 6, 6, 7, 7, 7, 8, 6, 		
  4, 5, 6, 6, 6, 7, 9, 12, 15, 15, 15, 13, 12, 11, 11, 10, 10, 10, 12, 14, 		
  14, 14, 14, 14, 13, 10, 8, 6, 4, 3, 3, 2, 3, 3, 3, 4, 4, 4, 5, 5, 		
  6, 6, 6, 5, 4, 2, 1, 1, 1, 2, 4, 8, 11, 12, 12, 13, 15, 15, 15, 15, 		
  15, 15, 15, 14, 12, 11, 9, 6, 3, 1, 0, 0, 0, 0, 0, 0, 1, 4, 6, 7, 		
  7, 6, 5, 5, 6, 10, 12, 13, 12, 11, 11, 10, 10, 11, 12, 13, 12, 9, 5, 2, 		
  1, 1, 1, 3, 6, 9, 10, 10, 8, 7, 6, 4, 3, 3, 2, 1, 1, 1, 1, 2, 		
  6, 10, 14, 15, 15, 15, 15, 15, 15, 15, 13, 10, 8, 6, 6, 6, 8, 9, 10, 9, 		
  8, 7, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 		
  8, 7, 6, 4, 2, 1, 1, 2, 4, 6, 7, 9, 11, 12, 14, 15, 15, 15, 15, 15, 		
  15, 15, 15, 11, 8, 7, 6, 6, 8, 9, 11, 10, 8, 6, 3, 0, 0, 0, 0, 0, 		
  0, 1, 4, 6, 8, 9, 9, 9, 8, 8, 8, 6, 5, 3, 3, 2, 2, 2, 1, 1, 		
  3, 6, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 		
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 8, 		
  7, 5, 3, 2, 2, 2, 3, 5, 7, 8, 11, 15, 15, 15, 15, 15, 15, 15, 15, 13, 		
  10, 6, 4, 4, 5, 8, 11, 13, 15, 14, 12, 8, 4, 1, 0, 0, 0, 0, 0, 0, 		
  0, 0, 3, 8, 12, 15, 15, 14, 13, 12, 10, 8, 6, 4, 3, 3, 3, 3, 3, 4, 		
  4, 3, 4, 3, 3, 3, 4, 5, 8, 11, 14, 14, 14, 13, 13, 14, 15, 15, 15, 15, 		
  15, 13, 10, 8, 7, 8, 8, 8, 9, 9, 11, 11, 10, 8, 7, 7, 6, 5, 6, 6, 		
  6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 6, 7, 8, 9, 9, 9, 9, 		
  9, 9, 9, 9, 10, 10, 11, 12, 13, 13, 12, 11, 10, 9, 9, 8, 7, 7, 7, 6, 		
  6, 7, 8, 8, 8, 9, 9, 8, 7, 7, 6, 5, 4, 3, 2, 3, 4, 4, 4, 4, 		
  5, 7, 9, 11, 11, 10, 10, 10, 11, 12, 12, 12, 12, 12, 10, 9, 7, 6, 5, 5, 		
  5, 5, 6, 7, 6, 6, 6, 6, 8, 9, 9, 8, 7, 6, 7, 7, 8, 10, 12, 15, 		
  15, 15, 15, 15, 15, 13, 10, 7, 6, 4, 3, 1, 1, 0, 1, 1, 1, 3, 4, 6, 		
  7, 7, 7, 6, 5, 4, 4, 4, 4, 5, 5, 7, 9, 10, 12, 12, 13, 14, 15, 15, 		
  15, 15, 15, 14, 12, 11, 11, 10, 7, 5, 4, 3, 2, 1, 0, 1, 2, 3, 5, 7, 		
  7, 7, 7, 6, 6, 7, 10, 11, 12, 11, 11, 11, 10, 10, 11, 12, 12, 11, 9, 6, 		
  3, 3, 2, 3, 4, 6, 8, 9, 9, 8, 8, 7, 6, 5, 4, 4, 3, 2, 2, 3, 		
  4, 7, 10, 13, 15, 15, 15, 15, 15, 15, 14, 12, 9, 7, 6, 6, 6, 8, 9, 10, 		
  9, 8, 7, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 		
  8, 8, 7, 6, 4, 2, 1, 2, 3, 4, 6, 7, 9, 11, 12, 14, 15, 15, 15, 15, 		
  15, 15, 15, 15, 11, 8, 7, 6, 6, 8, 9, 11, 10, 8, 6, 3, 0, 0, 0, 0, 		
  0, 0, 1, 4, 6, 8, 9, 9, 9, 8, 8, 8, 6, 5, 3, 3, 2, 2, 2, 1, 		
  1, 3, 6, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 		
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 		
  8, 7, 5, 3, 2, 2, 2, 3, 5, 6, 8, 11, 15, 15, 15, 15, 15, 15, 15, 15, 		
  13, 10, 6, 4, 3, 5, 8, 11, 14, 15, 15, 13, 8, 3, 0, 0, 0, 0, 0, 0, 		
  0, 0, 0, 2, 9, 13, 15, 15, 15, 13, 12, 10, 8, 6, 4, 3, 2, 2, 2, 3, 		
  3, 3, 2, 3, 2, 2, 2, 3, 4, 8, 12, 15, 15, 15, 15, 14, 15, 15, 15, 15, 		
  15, 15, 15, 11, 8, 8, 8, 9, 9, 9, 10, 12, 12, 10, 9, 7, 6, 5, 5, 5, 		
  5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 9, 9, 9, 9, 8, 9, 9, 10, 10, 10, 		
  10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 		
  8, 9, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 6, 4, 5, 6, 7, 7, 6, 		
  5, 6, 7, 7, 7, 7, 7, 7, 9, 13, 15, 15, 15, 15, 15, 14, 11, 7, 4, 4, 		
  3, 4, 6, 8, 8, 7, 5, 5, 4, 3, 1, 0, 0, 0, 0, 1, 3, 5, 10, 14, 		
  15, 15, 15, 15, 15, 15, 14, 11, 7, 6, 4, 2, 0, 0, 0, 0, 0, 0, 0, 4, 		
  8, 10, 10, 8, 6, 5, 6, 8, 9, 10, 11, 11, 11, 11, 10, 11, 12, 14, 14, 13, 		
  11, 8, 8, 9, 9, 8, 9, 10, 11, 11, 10, 9, 9, 8, 8, 8, 8, 8, 8, 8, 		
  9, 9, 9, 9, 9, 9, 9, 10, 10, 9, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 		
  9, 9, 8, 8, 8, 7, 5, 5, 6, 7, 8, 11, 12, 13, 13, 12, 11, 10, 9, 8, 		
  9, 10, 11, 11, 10, 8, 7, 6, 5, 4, 4, 4, 4, 4, 4, 4, 5, 6, 6, 7, 		
  7, 7, 7, 6, 6, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 		
  7, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 6, 7, 8, 8, 7, 5, 		
  3, 3, 3, 6, 10, 11, 12, 12, 12, 14, 14, 12, 10, 8, 5, 4, 3, 3, 4, 5, 		
  9, 13, 15, 15, 15, 15, 15, 14, 10, 6, 3, 2, 0, 0, 0, 2, 4, 6, 7, 8, 		
  9, 9, 8, 7, 5, 5, 5, 6, 8, 8, 7, 6, 5, 4, 3, 3, 3, 2, 2, 2, 		
  1, 0, 1, 1, 3, 4, 7, 11, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 		
  15, 15, 15, 12, 8, 5, 1, 0, 0, 1, 4, 7, 10, 12, 11, 9, 7, 5, 4, 2, 		
  1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 5, 6, 7, 8, 10, 12, 14, 15, 15, 		
  15, 14, 12, 10, 9, 8, 8, 11, 14, 15, 15, 15, 15, 15, 12, 8, 4, 1, 0, 0, 		
  0, 0, 2, 7, 11, 15, 15, 15, 15, 11, 8, 6, 5, 3, 0, 0, 0, 0, 0, 0, 		
  0, 0, 4, 10, 13, 13, 12, 11, 12, 13, 15, 15, 15, 13, 11, 10, 8, 6, 3, 2, 		
  2, 2, 2, 2, 2, 3, 7, 11, 15, 15, 15, 15, 15, 15, 15, 15, 12, 9, 7, 5, 		
  4, 3, 4, 7, 11, 15, 15, 15, 15, 15, 15, 15, 13, 9, 5, 1, 0, 0, 0, 2, 		
  5, 8, 11, 11, 11, 10, 10, 10, 10, 10, 8, 4, 1, 0, 1, 2, 2, 3, 5, 8, 		
  9, 8, 6, 4, 5, 6, 7, 6, 4, 4, 5, 8, 11, 15, 15, 15, 15, 15, 12, 10, 		
  9, 10, 9, 7, 6, 6, 8, 10, 12, 14, 15, 14, 11, 9, 8, 7, 6, 6, 5, 5, 		
  5, 5, 5, 6, 6, 6, 7, 5, 3, 3, 5, 6, 7, 7, 7, 9, 12, 14, 15, 13, 		
  11, 10, 11, 11, 10, 8, 6, 4, 3, 3, 5, 7, 9, 10, 12, 15, 15, 15, 15, 15, 		
  13, 9, 6, 4, 4, 4, 5, 8, 10, 13, 13, 12, 11, 10, 8, 5, 2, 0, 0, 0, 		
  1, 4, 8, 10, 11, 10, 7, 5, 3, 1, 2, 2, 2, 1, 0, 0, 0, 2, 4, 7, 		
  11, 13, 14, 14, 13, 13, 13, 14, 15, 15, 15, 15, 14, 12, 9, 7, 4, 1, 0, 0, 		
  0, 0, 0, 1, 5, 9, 13, 15, 15, 15, 15, 15, 15, 15, 15, 14, 11, 8, 5, 3, 		
  2, 2, 3, 6, 11, 15, 15, 15, 15, 15, 13, 11, 8, 6, 4, 3, 4, 7, 11, 14, 		
  15, 15, 15, 14, 9, 5, 3, 3, 4, 5, 6, 7, 6, 5, 2, 0, 0, 0, 0, 0, 		
  0, 0, 0, 2, 3, 5, 7, 10, 13, 14, 15, 15, 14, 14, 15, 15, 15, 15, 15, 15, 		
  15, 15, 14, 9, 5, 1, 0, 1, 4, 7, 9, 10, 11, 12, 10, 8, 5, 2, 0, 0, 		
  1, 2, 3, 5, 8, 10, 11, 12, 12, 13, 14, 14, 13, 12, 10, 9, 6, 2, 0, 0, 		
  0, 0, 0, 0, 1, 7, 9, 9, 8, 7, 8, 10, 12, 13, 12, 11, 10, 11, 14, 15, 		
  15, 15, 15, 15, 15, 14, 12, 11, 10, 7, 6, 4, 3, 3, 5, 7, 8, 8, 8, 8, 		
  9, 10, 11, 10, 8, 7, 5, 4, 5, 6, 6, 5, 4, 3, 2, 3, 5, 8, 9, 11, 		
  13, 14, 15, 15, 15, 15, 13, 11, 9, 9, 8, 8, 9, 11, 15, 15, 15, 15, 15, 15, 		
  13, 7, 4, 2, 1, 0, 0, 2, 4, 5, 6, 7, 7, 7, 4, 1, 0, 0, 0, 2, 		
  3, 5, 6, 7, 7, 6, 7, 7, 6, 5, 4, 2, 1, 1, 1, 2, 2, 4, 7, 10, 		
  13, 14, 14, 14, 14, 14, 13, 10, 7, 5, 4, 4, 5, 7, 10, 12, 14, 15, 14, 12, 		
  10, 9, 9, 8, 7, 5, 3, 3, 4, 6, 6, 8, 8, 7, 7, 8, 9, 10, 11, 12, 		
  12, 11, 10, 10, 11, 13, 14, 15, 15, 15, 15, 15, 15, 15, 15, 14, 12, 10, 9, 6, 		
  5, 4, 4, 3, 1, 0, 0, 2, 3, 3, 2, 1, 0, 1, 3, 5, 6, 7, 9, 11, 		
  12, 14, 15, 15, 15, 14, 14, 12, 10, 8, 6, 4, 1, 0, 1, 1, 2, 3, 5, 9, 		
  12, 14, 15, 15, 12, 10, 7, 5, 5, 6, 6, 7, 8, 8, 6, 2, 0, 0, 0, 0, 		
  0, 0, 0, 1, 4, 7, 10, 13, 14, 15, 15, 15, 15, 15, 14, 12, 11, 10, 9, 10, 		
  11, 12, 11, 10, 8, 6, 5, 4, 3, 1, 0, 0, 1, 3, 7, 10, 12, 13, 13, 11, 		
  10, 10, 9, 9, 10, 12, 12, 10, 8, 5, 3, 2, 2, 5, 8, 10, 11, 11, 11, 12, 		
  12, 12, 11, 10, 8, 6, 4, 4, 4, 3, 4, 5, 8, 8, 9, 9, 8, 8, 7, 6, 		
  7, 8, 8, 6, 4, 2, 1, 0, 0, 0, 3, 7, 11, 13, 13, 13, 14, 15, 14, 13, 		
  11, 10, 10, 11, 12, 13, 13, 12, 9, 5, 1, 0, 0, 0, 0, 0, 4, 8, 10, 11, 		
  12, 13, 13, 12, 11, 9, 8, 8, 8, 8, 7, 5, 5, 5, 4, 3, 3, 4, 7, 10, 		
  12, 13, 14, 13, 13, 12, 10, 8, 6, 5, 5, 7, 10, 13, 15, 15, 14, 13, 10, 8, 		
  6, 5, 4, 3, 3, 3, 6, 9, 12, 15, 15, 15, 13, 11, 9, 7, 6, 5, 2, 0, 		
  0, 0, 0, 0, 1, 6, 10, 13, 13, 13, 12, 12, 12, 12, 12, 11, 10, 10, 8, 7, 		
  5, 1, 0, 0, 0, 0, 0, 0, 2, 4, 7, 10, 14, 15, 15, 15, 15, 15, 15, 15, 		
  15, 15, 14, 14, 13, 11, 10, 9, 10, 9, 8, 9, 11, 13, 14, 14, 12, 11, 8, 5, 		
  3, 2, 2, 1, 1, 2, 3, 3, 4, 5, 6, 6, 6, 7, 7, 8, 9, 9, 10, 11, 		
  12, 12, 11, 8, 5, 2, 0, 0, 2, 5, 8, 9, 9, 9, 9, 8, 8, 7, 5, 4, 		
  3, 2, 3, 4, 6, 9, 11, 14, 15, 14, 11, 10, 9, 9, 8, 6, 5, 5, 5, 6, 		
  7, 8, 9, 9, 9, 8, 9, 10, 10, 10, 8, 6, 3, 0, 0, 2, 4, 7, 9, 11, 		
  11, 11, 11, 10, 10, 10, 12, 12, 12, 10, 8, 7, 7, 6, 5, 5, 6, 9, 10, 11, 		
  10, 9, 7, 6, 7, 7, 6, 6, 6, 6, 8, 10, 13, 14, 14, 13, 13, 13, 12, 13, 		
  12, 11, 9, 8, 8, 9, 9, 10, 12, 14, 15, 14, 14, 13, 12, 12, 10, 8, 8, 7, 		
  7, 7, 6, 6, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 7, 9, 12, 		
  13, 13, 14, 15, 15, 14, 15, 15, 14, 13, 12, 10, 8, 4, 1, 0, 0, 0, 0, 1, 		
  4, 8, 11, 13, 14, 14, 12, 10, 8, 7, 7, 9, 9, 9, 8, 7, 5, 3, 2, 2, 		
  2, 2, 2, 2, 4, 6, 9, 11, 13, 14, 15, 15, 14, 13, 12, 10, 8, 6, 5, 5, 		
  5, 6, 8, 8, 8, 9, 9, 9, 9, 7, 6, 5, 5, 6, 8, 10, 11, 12, 11, 11, 		
  9, 8, 9, 9, 10, 12, 13, 13, 11, 9, 6, 4, 2, 2, 3, 6, 8, 10, 10, 11, 		
  12, 13, 12, 12, 10, 9, 7, 6, 5, 4, 3, 3, 4, 6, 6, 7, 7, 8, 8, 8, 		
  7, 8, 8, 8, 7, 5, 3, 1, 0, 0, 1, 3, 7, 10, 12, 12, 12, 12, 13, 13, 		
  12, 10, 10, 10, 11, 13, 13, 13, 12, 10, 6, 2, 0, 0, 0, 0, 1, 4, 8, 10, 		
  11, 12, 13, 12, 11, 10, 9, 8, 8, 8, 8, 7, 5, 5, 5, 4, 3, 3, 4, 7, 		
  10, 12, 13, 14, 13, 13, 12, 10, 8, 6, 5, 5, 7, 10, 13, 15, 15, 14, 13, 10, 		
  8, 6, 5, 4, 3, 3, 3, 6, 9, 12, 15, 15, 15, 13, 11, 9, 7, 6, 5, 2, 		
  0, 0, 0, 0, 0, 1, 6, 10, 13, 13, 13, 12, 12, 12, 12, 12, 11, 10, 10, 8, 		
  7, 5, 1, 0, 0, 0, 0, 0, 0, 2, 4, 7, 10, 14, 15, 15, 15, 15, 15, 15, 		
  15, 15, 15, 14, 14, 13, 11, 10, 9, 10, 9, 8, 9, 11, 13, 14, 14, 12, 11, 8, 		
  5, 3, 2, 1, 1, 1, 2, 3, 3, 4, 5, 6, 5, 6, 7, 8, 8, 9, 9, 10, 		
  11, 12, 12, 11, 7, 4, 1, 0, 0, 1, 4, 8, 9, 9, 9, 8, 7, 6, 5, 3, 		
  1, 0, 0, 2, 4, 7, 10, 13, 15, 15, 15, 13, 10, 10, 10, 9, 7, 5, 6, 7, 		
  8, 8, 9, 10, 10, 9, 9, 9, 10, 11, 11, 9, 7, 3, 0, 0, 2, 5, 8, 11, 		
  13, 12, 11, 9, 8, 8, 9, 11, 12, 12, 11, 9, 9, 8, 7, 5, 3, 4, 6, 8, 		
  10, 10, 8, 6, 5, 6, 7, 7, 7, 7, 7, 9, 12, 15, 15, 15, 15, 15, 15, 14, 		
  13, 12, 10, 8, 7, 7, 7, 7, 7, 8, 10, 11, 11, 11, 10, 8, 7, 6, 5, 6, 		
  6, 8, 8, 8, 7, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 7, 10, 		
  13, 15, 15, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 12, 7, 3, 0, 0, 0, 0, 		
  0, 0, 2, 6, 10, 14, 15, 15, 13, 11, 9, 10, 11, 11, 10, 9, 9, 8, 7, 7, 		
  7, 9, 11, 10, 9, 8, 9, 11, 13, 14, 14, 13, 10, 8, 6, 5, 3, 0, 0, 0, 		
  0, 0, 0, 0, 1, 5, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 11, 8, 		
  4, 3, 3, 5, 9, 12, 15, 15, 15, 14, 11, 8, 5, 1, 0, 0, 0, 2, 4, 7, 		
  11, 13, 15, 14, 13, 12, 11, 11, 10, 9, 5, 2, 0, 0, 0, 0, 0, 1, 5, 9, 		
  12, 12, 11, 11, 10, 9, 7, 6, 5, 4, 5, 7, 9, 9, 8, 6, 4, 2, 1, 3, 		
  5, 6, 7, 8, 10, 13, 15, 15, 15, 15, 15, 13, 12, 11, 10, 11, 12, 13, 14, 13, 		
  11, 10, 10, 7, 5, 2, 2, 3, 5, 7, 8, 7, 4, 1, 0, 0, 0, 0, 0, 0, 		
  1, 2, 3, 4, 6, 8, 11, 15, 15, 15, 15, 15, 13, 13, 12, 12, 13, 14, 13, 10, 		
  8, 7, 6, 4, 3, 4, 6, 7, 6, 4, 3, 1, 0, 0, 2, 5, 7, 9, 10, 10, 		
  9, 8, 8, 10, 13, 15, 15, 14, 12, 10, 7, 3, 0, 0, 0, 0, 0, 1, 3, 5, 		
  6, 7, 8, 11, 14, 15, 15, 13, 11, 9, 8, 7, 8, 10, 11, 11, 10, 7, 4, 2, 		
  1, 3, 6, 10, 13, 13, 12, 10, 10, 8, 7, 6, 5, 7, 9, 12, 12, 11, 11, 11, 		
  10, 9, 9, 9, 10, 11, 11, 11, 11, 11, 9, 7, 6, 7, 7, 7, 7, 6, 7, 9, 		
  9, 9, 10, 12, 14, 15, 15, 15, 13, 9, 6, 4, 2, 0, 0, 0, 1, 1, 2, 4, 		
  7, 11, 13, 14, 14, 14, 12, 11, 9, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 		
  2, 4, 6, 7, 8, 11, 13, 15, 15, 15, 14, 14, 15, 15, 15, 15, 15, 15, 15, 14, 		
  10, 8, 7, 8, 7, 7, 7, 8, 9, 8, 6, 4, 3, 0, 0, 0, 0, 0, 3, 5, 		
  6, 5, 5, 6, 7, 10, 11, 12, 11, 9, 8, 8, 6, 5, 4, 5, 4, 4, 5, 6, 		
  8, 9, 10, 10, 8, 7, 6, 6, 7, 7, 8, 8, 9, 9, 8, 6, 4, 4, 4, 3, 		
  3, 3, 3, 5, 7, 8, 9, 8, 7, 7, 9, 12, 13, 14, 13, 12, 12, 13, 13, 12, 		
  12, 12, 14, 15, 15, 15, 15, 15, 11, 8, 5, 3, 3, 3, 3, 6, 9, 13, 15, 15, 		
  15, 13, 10, 7, 4, 3, 2, 2, 4, 5, 7, 6, 5, 4, 2, 0, 0, 0, 0, 0, 		
  0, 0, 3, 5, 7, 9, 8, 8, 6, 5, 4, 5, 7, 8, 10, 11, 12, 12, 12, 11, 		
  11, 10, 7, 6, 4, 3, 3, 3, 5, 8, 12, 15, 15, 15, 15, 14, 11, 8, 6, 5, 		
  6, 6, 6, 5, 4, 4, 4, 3, 3, 5, 8, 11, 12, 12, 10, 9, 8, 7, 6, 4, 		
  4, 6, 9, 11, 12, 14, 15, 15, 15, 14, 13, 12, 11, 11, 11, 11, 10, 7, 5, 3, 		
  1, 0, 0, 0, 0, 0, 5, 9, 11, 11, 11, 10, 10, 11, 12, 13, 13, 12, 12, 11, 		
  11, 11, 12, 15, 15, 15, 15, 15, 15, 15, 13, 9, 5, 1, 0, 0, 3, 5, 8, 9, 		
  9, 8, 4, 1, 0, 0, 0, 0, 0, 0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 11, 		
  9, 7, 6, 5, 4, 2, 0, 1, 3, 5, 8, 10, 11, 12, 12, 11, 8, 6, 5, 5, 		
  5, 6, 7, 8, 8, 8, 7, 5, 2, 1, 1, 3, 6, 7, 7, 6, 7, 8, 10, 10, 		
  9, 9, 8, 10, 12, 14, 14, 13, 12, 10, 9, 9, 8, 9, 9, 10, 12, 15, 15, 15, 		
  15, 15, 15, 13, 11, 9, 6, 5, 3, 4, 6, 9, 11, 14, 14, 14, 12, 7, 3, 1, 		
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 4, 5, 6, 7, 9, 11, 		
  13, 14, 14, 13, 9, 6, 5, 3, 2, 1, 2, 3, 4, 4, 5, 6, 8, 9, 10, 12, 		
  13, 13, 14, 15, 13, 12, 11, 11, 12, 14, 15, 15, 15, 14, 11, 7, 4, 2, 3, 5, 		
  8, 11, 11, 11, 11, 11, 10, 7, 6, 5, 6, 8, 8, 8, 6, 4, 2, 1, 1, 3, 		
  5, 7, 8, 9, 10, 13, 15, 15, 15, 15, 15, 15, 15, 15, 14, 9, 5, 2, 0, 0, 		
  0, 1, 3, 6, 9, 12, 15, 15, 15, 14, 10, 7, 6, 6, 7, 7, 6, 6, 4, 3, 		
  1, 0, 1, 3, 7, 10, 10, 10, 9, 8, 9, 9, 9, 9, 8, 8, 8, 9, 11, 11, 		
  12, 12, 10, 7, 4, 3, 3, 4, 6, 7, 9, 9, 9, 9, 7, 5, 3, 1, 1, 1, 		
  3, 3, 4, 5, 4, 4, 3, 3, 3, 6, 8, 10, 10, 11, 11, 12, 14, 15, 15, 15, 		
  15, 15, 15, 14, 12, 9, 7, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 7, 6, 4, 		
  5, 6, 8, 9, 10, 9, 6, 3, 0, 0, 0, 0, 2, 3, 5, 6, 6, 5, 5, 6, 		
  7, 8, 7, 6, 5, 5, 6, 9, 11, 12, 14, 13, 11, 9, 8, 7, 5, 4, 4, 4, 		
  4, 4, 4, 3, 2, 1, 2, 4, 7, 9, 10, 10, 9, 9, 10, 11, 11, 10, 10, 12, 		
  14, 15, 15, 15, 15, 13, 11, 9, 9, 10, 11, 11, 12, 12, 12, 12, 11, 10, 9, 8, 		
  6, 3, 2, 2, 2, 3, 3, 5, 7, 9, 9, 9, 8, 6, 6, 6, 7, 9, 10, 10, 		
  10, 9, 8, 8, 9, 9, 8, 9, 11, 13, 14, 13, 12, 11, 8, 6, 3, 1, 0, 0, 		
  0, 2, 4, 8, 12, 14, 14, 14, 12, 10, 9, 9, 8, 7, 5, 3, 1, 0, 0, 2, 		
  5, 8, 11, 14, 15, 13, 12, 11, 10, 8, 7, 6, 7, 7, 8, 8, 7, 5, 3, 0, 		
  0, 0, 0, 1, 3, 4, 6, 7, 10, 13, 15, 15, 15, 15, 15, 15, 15, 13, 13, 12, 		
  12, 10, 8, 6, 6, 7, 7, 8, 8, 9, 10, 11, 11, 11, 10, 9, 7, 5, 4, 3, 		
  2, 2, 1, 0, 0, 0, 0, 1, 4, 8, 10, 11, 11, 10, 10, 12, 14, 14, 14, 14, 		
  12, 12, 11, 9, 8, 6, 6, 7, 7, 8, 9, 9, 8, 7, 7, 8, 8, 8, 7, 7, 		
  8, 10, 12, 13, 12, 11, 9, 7, 5, 4, 4, 5, 7, 8, 8, 8, 6, 4, 3, 1, 		
  0, 0, 0, 0, 0, 1, 4, 6, 8, 9, 10, 10, 9, 10, 10, 10, 10, 11, 11, 11, 		
  12, 13, 13, 12, 11, 9, 8, 7, 6, 5, 4, 4, 4, 4, 5, 7, 8, 9, 11, 11, 		
  13, 14, 14, 14, 13, 13, 13, 12, 10, 8, 5, 3, 2, 2, 2, 3, 6, 7, 8, 9, 		
  9, 9, 9, 9, 9, 8, 8, 8, 8, 9, 10, 12, 14, 15, 15, 15, 13, 10, 8, 6, 		
  5, 3, 3, 4, 4, 5, 6, 7, 8, 7, 6, 5, 5, 7, 8, 8, 7, 6, 6, 6, 		
  5, 6, 5, 6, 8, 10, 10, 10, 9, 8, 8, 9, 9, 10, 10, 9, 9, 10, 11, 12, 		
  12, 11, 11, 11, 9, 8, 6, 5, 5, 5, 5, 7, 8, 9, 9, 9, 8, 8, 7, 6, 		
  6, 6, 7, 7, 7, 6, 4, 3, 3, 3, 5, 7, 9, 11, 11, 11, 11, 12, 12, 12, 		
  12, 12, 11, 9, 9, 7, 5, 4, 3, 3, 4, 5, 7, 7, 7, 8, 8, 9, 10, 9, 		
  8, 8, 9, 9, 9, 9, 8, 5, 3, 0, 0, 0, 0, 3, 5, 7, 9, 10, 9, 9, 		
  9, 9, 9, 8, 7, 6, 6, 7, 9, 11, 12, 12, 12, 10, 8, 7, 6, 6, 5, 6, 		
  6, 5, 5, 5, 4, 3, 2, 2, 3, 5, 7, 9, 9, 9, 9, 10, 10, 11, 10, 11, 		
  12, 13, 14, 15, 15, 14, 13, 10, 9, 8, 9, 10, 10, 10, 11, 11, 10, 10, 10, 10, 		
  9, 8, 6, 4, 3, 3, 3, 4, 5, 7, 8, 8, 8, 7, 5, 5, 6, 7, 9, 10, 		
  10, 10, 9, 8, 8, 9, 9, 8, 9, 10, 12, 13, 12, 10, 9, 7, 5, 3, 2, 1, 		
  1, 1, 3, 5, 9, 12, 14, 14, 14, 12, 11, 10, 10, 9, 7, 5, 3, 2, 1, 1, 		
  2, 5, 8, 11, 14, 14, 13, 12, 11, 10, 8, 7, 6, 7, 7, 7, 8, 7, 5, 3, 		
  0, 0, 0, 0, 1, 3, 4, 6, 7, 10, 13, 15, 15, 15, 15, 15, 15, 15, 13, 13, 		
  12, 12, 10, 8, 6, 6, 7, 7, 8, 8, 9, 10, 11, 11, 11, 10, 9, 7, 5, 4, 		
  3, 2, 2, 1, 0, 0, 0, 0, 1, 4, 8, 10, 11, 11, 10, 10, 12, 14, 14, 14, 		
  14, 12, 12, 11, 9, 8, 6, 6, 7, 7, 8, 9, 9, 8, 7, 7, 8, 8, 8, 7, 		
  7, 8, 10, 12, 13, 12, 11, 9, 7, 5, 4, 4, 5, 7, 8, 9, 8, 6, 4, 3, 		
  1, 0, 0, 0, 0, 0, 1, 4, 6, 8, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 		
  11, 12, 13, 13, 12, 11, 9, 7, 7, 6, 4, 3, 2, 2, 2, 4, 6, 8, 10, 12, 		
  13, 14, 15, 15, 14, 13, 13, 13, 12, 11, 8, 5, 3, 1, 0, 1, 3, 6, 8, 10, 		
  10, 11, 10, 9, 9, 8, 8, 7, 6, 6, 6, 9, 11, 13, 15, 15, 15, 14, 12, 10, 		
  8, 7, 5, 4, 4, 4, 3, 4, 4, 4, 4, 3, 3, 4, 6, 8, 8, 7, 6, 6, 		
  6, 7, 7, 8, 9, 10, 11, 11, 10, 8, 7, 8, 8, 9, 10, 10, 10, 10, 11, 12, 		
  12, 11, 10, 10, 11, 11, 10, 8, 7, 5, 4, 4, 5, 6, 8, 9, 10, 11, 11, 11, 		
  9, 9, 9, 9, 9, 8, 6, 5, 3, 3, 3, 4, 7, 9, 11, 11, 11, 10, 10, 8, 		
  7, 7, 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 4, 6, 6, 7, 7, 9, 10, 12, 		
  12, 12, 11, 11, 11, 10, 9, 6, 4, 2, 1, 1, 1, 2, 5, 7, 9, 12, 14, 15, 		
  15, 14, 13, 11, 9, 9, 8, 8, 9, 10, 11, 11, 10, 9, 7, 6, 5, 5, 6, 7, 		
  8, 8, 8, 8, 8, 7, 5, 3, 2, 2, 3, 4, 5, 6, 8, 9, 9, 10, 10, 11, 		
  11, 12, 12, 12, 12, 12, 12, 10, 9, 8, 7, 6, 5, 5, 5, 6, 6, 7, 8, 9, 		
  11, 12, 13, 13, 11, 8, 7, 6, 6, 5, 5, 5, 4, 3, 2, 2, 4, 6, 8, 10, 		
  11, 11, 10, 9, 9, 9, 8, 7, 6, 6, 6, 6, 5, 4, 2, 1, 1, 1, 2, 3, 		
  5, 6, 7, 9, 12, 13, 14, 14, 14, 15, 15, 15, 15, 14, 13, 12, 11, 9, 8, 9, 		
  9, 9, 9, 9, 9, 8, 7, 7, 7, 6, 4, 3, 1, 1, 2, 2, 4, 5, 6, 7, 		
  7, 6, 6, 7, 9, 10, 10, 10, 10, 10, 9, 9, 8, 7, 6, 5, 5, 4, 4, 3, 		
  2, 3, 3, 4, 6, 8, 9, 10, 10, 11, 13, 14, 14, 14, 13, 13, 13, 12, 11, 10, 		
  9, 8, 7, 7, 7, 8, 9, 10, 11, 12, 11, 9, 8, 7, 6, 4, 3, 1, 1, 1, 		
  2, 3, 5, 6, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 10, 9, 8, 		
  8, 8, 8, 9, 9, 8, 7, 6, 5, 4, 4, 4, 6, 7, 9, 10, 11, 11, 10, 9, 		
  9, 10, 11, 12, 12, 11, 9, 7, 5, 4, 3, 4, 6, 8, 10, 10, 10, 10, 9, 8, 		
  7, 5, 5, 5, 6, 6, 6, 6, 6, 4, 3, 2, 3, 4, 6, 7, 7, 7, 8, 9, 		
  10, 11, 12, 12, 12, 12, 11, 10, 8, 6, 5, 4, 2, 1, 1, 1, 2, 4, 7, 10, 		
  12, 12, 12, 11, 11, 12, 13, 12, 11, 10, 9, 8, 8, 8, 9, 10, 11, 10, 10, 10, 		
  10, 10, 10, 10, 9, 8, 7, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 		
  5, 5, 6, 7, 7, 8, 9, 10, 10, 12, 12, 12, 11, 11, 12, 12, 11, 11, 11, 9, 		
  7, 6, 5, 3, 2, 2, 3, 5, 7, 8, 9, 8, 8, 7, 6, 7, 7, 7, 7, 7, 		
  6, 6, 7, 6, 6, 5, 6, 7, 9, 9, 9, 9, 8, 8, 8, 9, 10, 11, 10, 10, 		
  10, 10, 10, 10, 9, 8, 7, 7, 6, 5, 5, 4, 5, 6, 7, 9, 11, 12, 11, 9, 		
  8, 6, 5, 6, 6, 6, 8, 8, 9, 8, 7, 7, 7, 6, 5, 6, 6, 6, 7, 7, 		
  8, 8, 8, 8, 8, 7, 6, 6, 5, 6, 7, 9, 10, 11, 11, 11, 10, 9, 8, 7, 		
  6, 5, 5, 4, 4, 5, 6, 7, 9, 12, 14, 14, 14, 13, 12, 11, 10, 8, 8, 8, 		
  7, 7, 7, 6, 5, 5, 4, 3, 4, 5, 7, 8, 8, 8, 7, 7, 8, 9, 9, 10, 		
  11, 11, 11, 11, 12, 12, 13, 14, 13, 12, 11, 10, 8, 8, 6, 5, 4, 4, 4, 4, 		
  6, 7, 7, 7, 7, 7, 8, 9, 9, 9, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 		
  7, 6, 6, 7, 8, 10, 11, 12, 10, 9, 9, 8, 7, 6, 6, 6, 7, 8, 9, 10, 		
  9, 9, 8, 7, 5, 4, 4, 4, 5, 6, 7, 8, 9, 9, 8, 8, 8, 7, 7, 7, 		
  7, 6, 5, 5, 5, 5, 6, 8, 9, 11, 11, 11, 10, 10, 10, 9, 8, 7, 7, 6, 		
  5, 5, 5, 5, 5, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 8, 8, 9, 10, 		
  10, 10, 10, 9, 9, 10, 10, 11, 12, 12, 11, 11, 11, 10, 8, 7, 7, 6, 6, 7, 		
  7, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 8, 9, 10, 10, 10, 10, 9, 9, 10, 		
  10, 10, 9, 9, 9, 9, 8, 8, 8, 7, 7, 6, 6, 6, 7, 8, 9, 9, 9, 9, 		
  8, 7, 6, 6, 6, 5, 5, 5, 4, 5, 5, 6, 6, 7, 8, 9, 9, 10, 10, 10, 		
  10, 10, 10, 9, 9, 9, 8, 8, 8, 9, 10, 12, 12, 12, 12, 12, 12, 11, 10, 8, 		
  6, 5, 4, 5, 6, 7, 8, 9, 9, 9, 8, 6, 5, 5, 5, 5, 4, 4, 4, 4, 		
  5, 6, 7, 8, 9, 10, 10, 10, 9, 8, 8, 8, 7, 7, 7, 7, 7, 7, 6, 6, 		
  6, 6, 6, 6, 6, 6, 6, 7, 7, 9, 9, 10, 10, 10, 9, 9, 8, 8, 8, 9, 		
  9, 10, 9, 9, 8, 7, 7, 7, 7, 7, 8, 9, 9, 9, 10, 10, 10, 9, 9, 9, 		
  9, 8, 8, 7, 7, 7, 8, 8, 10, 10, 11, 11, 10, 10, 8, 7, 5, 4, 3, 3, 		
  2, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 7, 6, 		
  6, 5, 4, 4, 4, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 11, 11, 11, 		
  11, 12, 12, 12, 12, 12, 11, 10, 8, 8, 7, 7, 6, 6, 7, 8, 8, 9, 9, 8, 		
  8, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 5, 6, 8, 9, 10, 10, 9, 9, 		
  9, 10, 11, 11, 11, 10, 9, 9, 7, 6, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 		
  8, 8, 8, 8, 8, 8, 8, 9, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 8, 7, 		
  7, 6, 6, 6, 5, 5, 5, 5, 6, 7, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 		
  7, 7, 8, 8, 8, 9, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 8, 7, 7, 8, 		
  8, 8, 8, 8, 7, 6, 6, 6, 7, 7, 8, 8, 8, 8, 7, 7, 6, 6, 6, 7, 		
  7, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 		
  9, 8, 8, 8, 8, 8, 9, 10, 10, 10, 10, 10, 9, 8, 8, 7, 7, 7, 7, 8, 		
  8, 9, 9, 9, 9, 8, 8, 7, 7, 7, 8, 8, 8, 7, 6, 6, 5, 5, 5, 5, 		
  6, 6, 7, 8, 8, 9, 9, 9, 10, 10, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 		
  6, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 9, 10, 		
  10, 10, 10, 9, 9, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 		
  8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 		
  8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 		
  7, 7, 7, 7, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 		
  8, 8, 8, 8, 9, 9, 9, 8, 8, 8, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 		
  7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 9, 9, 9, 8, 8, 8, 7, 8, 		
  8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 6, 6, 		
  6, 6, 6, 6, 6, 7, 7, 8, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 		
  6, 6, 6, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 10, 10, 11, 10, 10, 10, 		
  10, 10, 10, 10, 10, 10, 11, 10, 10, 9, 9, 8, 7, 7, 7, 7, 7, 8, 8, 8, 		
  8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 		
  8, 8, 9, 10, 10, 10, 9, 9, 9, 8, 7, 6, 6, 6, 7, 7, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 10, 10, 10, 10, 9, 9, 9, 8, 8, 8, 		
  7, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 		
  7, 7, 7, 8, 8, 8, 9, 9, 10, 10, 10, 10, 10, 10, 9, 9, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 7, 7, 6, 6, 7, 7, 7, 8, 8, 8, 8, 7, 7, 6, 6, 		
  7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  9, 9, 8, 8, 8, 8, 8, 9, 10, 10, 10, 10, 10, 9, 8, 8, 7, 7, 7, 7, 		
  8, 8, 9, 9, 9, 9, 8, 8, 7, 7, 7, 8, 8, 8, 7, 6, 6, 5, 5, 5, 		
  5, 6, 6, 7, 8, 8, 9, 9, 9, 10, 10, 10, 10, 9, 9, 8, 8, 7, 7, 6, 		
  6, 6, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 9, 		
  10, 10, 10, 10, 9, 9, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 		
  8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 		
  8, 8, 8, 7, 7, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 8, 8, 		
  8, 8, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 7, 7, 7, 7, 7, 7, 6, 7, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 		
  8, 8, 8, 8, 9, 10, 10, 9, 9, 9, 9, 9, 8, 9, 9, 8, 8, 8, 7, 7, 		
  7, 7, 6, 7, 7, 7, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 6, 		
  6, 7, 8, 8, 8, 8, 8, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 6, 		
  6, 6, 6, 6, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 		
  8, 7, 8, 7, 7, 8, 8, 9, 9, 9, 9, 9, 8, 8, 8, 7, 6, 6, 7, 7, 		
  7, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 6, 6, 5, 5, 		
  5, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 		
  10, 10, 9, 9, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 		
  6, 6, 7, 6, 6, 7, 7, 7, 8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 		
  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 8, 8, 8, 8, 		
  8, 8, 9, 9, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 7, 7, 7, 		
  7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 		
  7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 6, 7, 7, 7, 8, 8, 9, 9, 9, 		
  9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 8, 8, 8, 8, 8, 		
  8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 7, 8, 7, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 		
  8, 8, 8, 8, 8, 8, 7, 7, 8, 7, 8, 7, 8, 8, 7, 8, 8, 7, 7, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 		
  8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 7, 7, 7, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 		
  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8};		
	
	


 













	
	unsigned int Index=0;
	unsigned int Index1=1;
	// *************************** Capture image dimensions out of BMP**********
#define BUNKERW     ((unsigned char)Bunker0[18])
#define BUNKERH     ((unsigned char)Bunker0[22])
#define ENEMY30W    ((unsigned char)SmallEnemy30PointA[18])
#define ENEMY30H    ((unsigned char)SmallEnemy30PointA[22])
#define ENEMY20W    ((unsigned char)SmallEnemy20PointA[18])
#define ENEMY20H    ((unsigned char)SmallEnemy20PointA[22])
#define ENEMY10W    ((unsigned char)SmallEnemy10PointA[18])
#define ENEMY10H    ((unsigned char)SmallEnemy10PointA[22])
#define ENEMYBONUSW ((unsigned char)SmallEnemyBonus0[18])
#define ENEMYBONUSH ((unsigned char)SmallEnemyBonus0[22])
#define LASERW      ((unsigned char)Laser0[18])
#define LASERH      ((unsigned char)Laser0[22])
#define MISSILEW    ((unsigned char)Missile0[18])
#define MISSILEH    ((unsigned char)Missile0[22])
#define PLAYERW     ((unsigned char)PlayerShip0[18])
#define PLAYERH     ((unsigned char)PlayerShip0[22])



unsigned char String[10]; 
unsigned long Distance;   
unsigned long ADCdata;    
unsigned long Flag;       
unsigned long i;
unsigned long sw1;
unsigned long pfs;
unsigned long count;
unsigned long prevsw1=0;
unsigned long prevsw12=0;
unsigned long Semaphore;
void DisableInterrupts(void); 
void EnableInterrupts(void);  
void Timer2_Init(unsigned long period);
void Delay100ms(unsigned long count); 
unsigned long TimerCount;
void Delay10ms(unsigned long count){unsigned long volatile time;
  while(count>0){
    time = 72724;  
    while(time){
	  	time--;
    }
    count--;
  }
}
int absolute(int a){
if(a>0)
	return a;
else
{
	a*=-1;
	return (a);
}
}
struct State {
  unsigned long x;      
  unsigned long y;      
  const unsigned char *image; 
  long life;            
};          
typedef struct State STyp;
STyp missiles[1000],Enemy[4],explode[4];

void Init_Enemies(void){ int i;int y;
  for(i=0;i<4;i++){
    Enemy[i].x = 10*i;
    Enemy[i].y = 10*i;
    Enemy[i].image = SmallEnemy30PointA;
    Enemy[i].life = 1;
		explode[i].image=BigExplosion1;
	 explode[i].life=1;
   }
	
 }

 void Draw(void){ int i;
  Nokia5110_ClearBuffer();
  for(i=0;i<4;i++){
    if(Enemy[i].life > 0){
     Nokia5110_PrintBMP(Enemy[i].x, Enemy[i].y, Enemy[i].image, 0);
    }
  }
	  
}
 void Move_Enemies(void){ int i;
  for(i=0;i<4;i++){
    if(Enemy[i].x < 72){
      Enemy[i].x += 2;
    }else{
      Enemy[i].x %= 2;
    }
  }
}
void Create_Misilles(void){ 

missiles[count].x=Distance+7;
	missiles[count].y=47;
	missiles[count].image=Laser0;
	missiles[count].life=1;
}
void Move_Misilles(void){ 
	int i;
	for(i=0;i<count;i++){
	if(missiles[i].life==1&&missiles[i].y>1){
	missiles[i].y=missiles[i].y-5;
	}
	if(missiles[i].y<4)
		missiles[i].life=0;
	
}
}
unsigned int no=4;
void Draw_Misilles(void){ 
	int i;
	for(i=0;i<count;i++){
	if(missiles[i].life==1){
  Nokia5110_PrintBMP(missiles[i].x,missiles[i].y,missiles[i].image , 0);
	}
}
}
void Check_Collision(void)
{
	int i,j;
	for(i=1;i<=3;i++)
	{
		for(j=0;j<count;j++)
	if((absolute(Enemy[i].y-missiles[i].y))<=3)
	{
		Enemy[i].life=0;
		
		missiles[count].life=0;
		GPIO_PORTF_DATA_R=0x02;
		if(explode[i].life==1)
		Nokia5110_PrintBMP(Enemy[i].x, Enemy[i].y, explode[i].image, 0);
		
		explode[i].life=0;
		
		
	}
	
}
	}
void SysTick_Init(unsigned long period){
	NVIC_ST_CTRL_R = 0;                   
  NVIC_ST_RELOAD_R =period-1;      
  NVIC_ST_CURRENT_R = 0;                             
  NVIC_ST_CTRL_R = 0x00000007;    
	

}
unsigned long Convert(unsigned long sample){
	unsigned long value;
	value=(sample*3300/(4096))*65/3300;
  return value;  
}

void SysTick_Handler(void){
Flag=1;
ADCdata=ADC0_In();
Distance=Convert(ADCdata);
	sw1=(GPIO_PORTE_DATA_R&0x01);
	if(sw1==1&&prevsw1==0)
	{
		prevsw1=1;
		Create_Misilles();
		
		if(count==1000)
			count=0;
		else
		count++;
	}
	else
	{
		prevsw1=sw1;
		
	}
	Nokia5110_ClearBuffer();
	Move_Enemies();
	Move_Misilles();
	Draw();
	Draw_Misilles();
	Check_Collision();
Nokia5110_PrintBMP(Distance, 47, PlayerShip0, 0); // player ship middle bottom

	
}



void UART_ConvertDistance(unsigned long n){
unsigned long i,d,k,count;
if(n>=10000){
	String[0]='*';
	String[1]='.';
	String[2]='*';
	String[3]='*';
	String[4]='*';
	String[5]=' ';
	String[6]='c';
	String[7]='m';
	}
else {i=0;count=4;
  String[0]='0';
	String[1]='.';
	String[2]='0';
	String[3]='0';
	String[4]='0';
	String[5]=' ';
	String[6]='c';
	String[7]='m';
  while(n>0){
		if(count==1){count--;continue;}
	d=n%10;
	n=n/10;	
	String[count--]=d+0x30;
	}

}
}


void PortF_Init(void){ volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020;     // 1) activate clock for Port F
  delay = SYSCTL_RCGC2_R;           // allow time for clock to start
  GPIO_PORTF_LOCK_R = 0x4C4F434B;   // 2) unlock GPIO Port F
  GPIO_PORTF_CR_R = 0x1F;           // allow changes to PF4-0
  
  GPIO_PORTF_AMSEL_R = 0x00;        // 3) disable analog on PF
  GPIO_PORTF_PCTL_R = 0x00000000;   // 4) PCTL GPIO on PF4-0
  GPIO_PORTF_DIR_R = 0x0E;          // 5) PF4,PF0 in, PF3-1 out
  GPIO_PORTF_AFSEL_R = 0x00;        // 6) disable alt funct on PF7-0
  GPIO_PORTF_PUR_R = 0x11;          // enable pull-up on PF0 and PF4
  GPIO_PORTF_DEN_R = 0x1F;          // 7) enable digital I/O on PF4-0
}

void PortE_Init(void){ volatile  unsigned long delay;
	SYSCTL_RCGC2_R |= 0x10;          
  delay = SYSCTL_RCGC2_R;          
                                   
  GPIO_PORTE_AMSEL_R &= ~0x0B;     
  GPIO_PORTE_PCTL_R &= ~0x0000FFFF;
  GPIO_PORTE_DIR_R &= ~0x0F;       
  GPIO_PORTE_AFSEL_R &= ~0x0B;     
	//GPIO_PORTE_PDR_R |= 0x0F;        
  GPIO_PORTE_DEN_R |= 0x0F;       
  
}



int main(void){
	unsigned int cc1=0;
  TExaS_Init(SSI0_Real_Nokia5110_Scope);  
  Random_Init(1);
	DAC_Init();
	
	Piano_Init();
	Nokia5110_Init();
	
	ADC0_Init();
	PortE_Init();
	PortF_Init();
	do
	{
 Nokia5110_ClearBuffer();
	Nokia5110_Clear();
	do
	{
	Nokia5110_SetCursor(1, 1);
  Nokia5110_OutString("***********");
  Nokia5110_SetCursor(1, 2);
  Nokia5110_OutString("***SPACE***");
  Nokia5110_SetCursor(1, 3);
  Nokia5110_OutString("*INVADERS**");
	Nokia5110_SetCursor(1, 4);
  Nokia5110_OutString("***********");
	Nokia5110_SetCursor(1, 5);
  Nokia5110_OutString("PRESS START");
	Delay100ms(5);
	Nokia5110_SetCursor(1, 5);
  Nokia5110_OutString("           ");
	Delay100ms(5);
	}while(!(GPIO_PORTE_DATA_R));
	Delay100ms(5);
	Timer2_Init(7257);
	SysTick_Init(6000000); // initialize SysTick for 40 Hz interrupts
  Nokia5110_PrintBMP(32, 47, PlayerShip0, 0); // player ship middle bottom
	Init_Enemies();
	count=0;
  while(1){
		while(Flag==0){}
		Nokia5110_DisplayBuffer();     
    Flag=0;
			
			if((Enemy[1].life==0)&&(Enemy[2].life==0)&&(Enemy[3].life==0))
			{
	break;		
		
			}
  }
	
	
	Nokia5110_ClearBuffer();
	Nokia5110_Clear();
	Nokia5110_SetCursor(1, 1);
  Nokia5110_OutString("***********");
  Nokia5110_SetCursor(1, 2);
  Nokia5110_OutString("***GAME****");
  Nokia5110_SetCursor(1, 3);
  Nokia5110_OutString("***OVER****");
	Nokia5110_SetCursor(1, 4);
  Nokia5110_OutString("***********");
	Nokia5110_SetCursor(1, 5);
  Nokia5110_OutString("WAITTOSTART");
	Delay100ms(50);
	
}while(!(GPIO_PORTE_DATA_R));

}



void Timer2_Init(unsigned long period){ 
  unsigned long volatile delay;
 // SYSCTL_RCGCTIMER_R |= 0x04;   // 0) activate timer2
	SYSCTL_RCGC1_R |= 0x40000;
  delay = SYSCTL_RCGCTIMER_R;
  TimerCount = 0;
  Semaphore = 0;
  TIMER2_CTL_R = 0x00000000;    // 1) disable timer2A during setup
  TIMER2_CFG_R = 0x00000000;    // 2) configure for 32-bit mode
  TIMER2_TAMR_R = 0x00000002;   // 3) configure for periodic mode, default down-count settings
  TIMER2_TAILR_R = period-1;    // 4) reload value
  TIMER2_TAPR_R = 0;            // 5) bus clock resolution
  TIMER2_ICR_R = 0x00000001;    // 6) clear timer2A timeout flag
  TIMER2_IMR_R = 0x00000001;    // 7) arm timeout interrupt
  NVIC_PRI5_R = (NVIC_PRI5_R&0x00FFFFFF)|0x80000000; // 8) priority 4
// interrupts enabled in the main program after all devices initialized
// vector number 39, interrupt number 23
  NVIC_EN0_R = 1<<23;           // 9) enable IRQ 23 in NVIC
  TIMER2_CTL_R = 0x00000001;    // 10) enable timer2A
}
void Timer2A_Handler(void){
unsigned long l=0;	
  TIMER2_ICR_R = 0x00000001;   // acknowledge timer2A timeout
 
	
	pfs=GPIO_PORTF_DATA_R&0x02;
	sw1=(GPIO_PORTE_DATA_R&0x01);
	if(!pfs){
	 if((sw1==1&&Index<4080))
	{
	Index++;
 Index = (Index);
		
  DAC_Out(shoot[Index]);
}

	else if(sw1==0) {
		
		prevsw12=sw1;
		Index=0;
	DAC_Out(0);	
	}
	
 
	
		TimerCount++;
 
}
	else
	{
	if(Index1<8731){
	Index1++;
		DAC_Out(explosion[Index1]);
	}
	else{
		Index1=0;
		GPIO_PORTF_DATA_R=0x00;
		
	}}
}
void Delay100ms(unsigned long count){unsigned long volatile time;
  while(count>0){
    time = 727240;  
    while(time){
	  	time--;
    }
    count--;
  }
}
